#include <Reflection/ReflectionInfo.h>

namespace Metadata
{
    class {{class_name}}Meta : public ClassInfo
    {
        static {{class_name}}Meta Data;

        // private constructor
        {{class_name}}Meta();

        const std::string Name = "{{class_name}}";
        const std::string CanonicalName = "{{{canonical_name}}}";

    public:
        ClassInfo& Get() { return Data; }
    };

    TReflectionVector<FieldInfo> {{class_name}}Meta::Fields = {
        {{#fields}}
            { {{name}}, Meta::GetType< {{{type}}} >, {{access}}, {{offset}} },
        {{/fields}}
    };

    TReflectionVector<MethodInfo> {{class_name}}Meta::Methods = {
        {{#methods}}
            { {{name}}, {{offset}}, {{{return_type}}} },
        {{/methods}}
    };
}

template <> ClassInfo* Meta::GetType<typename {{{canonical_name}}}>()
{
    return &Metadata::{{class_name}}Meta::Get();
}